/******************************************************************************
*       SOFA, Simulation Open-Framework Architecture, version 1.0 beta 4      *
*                (c) 2006-2009 MGH, INRIA, USTL, UJF, CNRS                    *
*                                                                             *
* This library is free software; you can redistribute it and/or modify it     *
* under the terms of the GNU Lesser General Public License as published by    *
* the Free Software Foundation; either version 2.1 of the License, or (at     *
* your option) any later version.                                             *
*                                                                             *
* This library is distributed in the hope that it will be useful, but WITHOUT *
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *
* for more details.                                                           *
*                                                                             *
* You should have received a copy of the GNU Lesser General Public License    *
* along with this library; if not, write to the Free Software Foundation,     *
* Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA.          *
*******************************************************************************
*                               SOFA :: Modules                               *
*                                                                             *
* Authors: The SOFA Team and external contributors (see Authors.txt)          *
*                                                                             *
* Contact information: contact@sofa-framework.org                             *
******************************************************************************/
#ifndef SOFA_COMPONENT_LINEARSOLVER_Preconditioner_H
#define SOFA_COMPONENT_LINEARSOLVER_Preconditioner_H

#include <sofa/core/behavior/LinearSolver.h>
#include <sofa/component/linearsolver/MatrixLinearSolver.h>
#include <sofa/simulation/common/MechanicalVisitor.h>
#include <sofa/component/linearsolver/SparseMatrix.h>
#include <sofa/component/linearsolver/FullMatrix.h>
#include <sofa/helper/map.h>
#include <sofa/component/linearsolver/CompressedRowSparseMatrix.h>
#include <sofa/defaulttype/Vec3Types.h>
#include <sofa/defaulttype/VecTypes.h>

//#include <PreconditionerInvertData.h>

//#define size 128




namespace sofa {

namespace component {

namespace linearsolver {

template<class TReal>
   class PreconditionerInvertData : public MatrixInvertData
   {
     public :
   //	typedef TReal Real;
	    CompressedRowSparseMatrix<TReal> Mfiltered;

	    TReal* valuesM;
	    int numberOfEntriesM;
		int* rowIndexArrayM;
		int* columnsArrayM;

	    void*            precond_args;
	    helper::vector<TReal> B;
	    helper::vector<TReal> R;
	    helper::vector<TReal> X1;
	    int numberOfRows;

	    CompressedRowSparseMatrix<TReal> L;
	    bool upperL;
	    bool transpL;
	    int numberOfEntriesL;
	    int* rowIndexArrayL;
	    int* columnsArrayL;
	    TReal* valuesL;

	    CompressedRowSparseMatrix<TReal> U;
	    bool upperU;
	    bool transpU;
	    int numberOfEntriesU;
		int* rowIndexArrayU;
		int* columnsArrayU;
		TReal* valuesU;

	    int* ipar;
	    double* dpar;

	    //these are the arrays for the temp matrix generated by the MKL factorization routines
	    int numberOfEntriesTemp;
	    int* rowIndexArrayTemp;
	    int* columnsArrayTemp;
	    TReal* valuesTemp;

	    //temp variables if permutation is performed
	    bool permutationPerformed;
	    helper::vector<TReal> Btemp;
	    helper::vector<TReal> Rtemp;
	    helper::vector<int> perm;
	    helper::vector<int> invperm;


//	    CompressedRowSparseMatrix<TReal> MTestFiltered;
//	    CompressedRowSparseMatrix<TReal> MTest;



	    PreconditionerInvertData() {


	      ipar = new int[128];
	      dpar = new double[128];
	      permutationPerformed = false;

	      //bilu0 = new double[12];

	    }

	    ~PreconditionerInvertData() {
	    	delete [] ipar;
	    	delete [] dpar;
	    	//delete [] bilu0;

	    }




   };



/// Cholesky preconditioner implemented with the TAUCS library
template<class TReal>
class Preconditioner : public sofa::component::linearsolver::MatrixLinearSolver< CompressedRowSparseMatrix<TReal>,FullVector<TReal> >
{
public:
    SOFA_CLASS(SOFA_TEMPLATE(Preconditioner,TReal),SOFA_TEMPLATE2(sofa::component::linearsolver::MatrixLinearSolver, CompressedRowSparseMatrix<TReal>, FullVector<TReal>));

    typedef TReal Real;
    typedef sofa::component::linearsolver::MatrixLinearSolver< CompressedRowSparseMatrix<TReal>,FullVector<TReal> > Inherit;


    //typedef TOperatorType  OperatorType; //this is for cpu based simulation



    Preconditioner() {}
    virtual ~Preconditioner() {}
    virtual bool needsNewMatrix() { return false; }
    MatrixInvertData * getInvertData()	{
		if (Inherit::invertData==NULL) Inherit::invertData=createInvertData();
		return Inherit::invertData;
	}

   MatrixInvertData * createInvertData() {
      return new PreconditionerInvertData<Real>();
    }



  // OperatorType* GetOperator(){ return this->m_ApplyMatrixOperator;}


 protected:
   //  OperatorType* m_ApplyMatrixOperator;

};

} // namespace linearsolver

} // namespace component

} // namespace sofa

#endif
